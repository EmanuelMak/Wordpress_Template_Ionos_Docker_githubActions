name: CI - Tests

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker Compose
      run: |
        echo "üß™ Testing Docker Compose configuration..."
        
        # Test if docker-compose.yml is valid
        docker-compose config
        
        # Test if all required files exist
        required_files=(
          "docker-compose.yml"
          "dockerfile.wp"
          "wp-init.sh"
          "wp-config-create.sh"
          "wait-for-db.sh"
          "env.example"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "‚úÖ Docker Compose configuration is valid"
        
    - name: Test Theme Structure
      run: |
        echo "üß™ Testing theme structure..."
        
        if [ -d "themes/my-theme" ]; then
          echo "‚úÖ Theme directory exists"
          
          # Check required theme files
          theme_files=(
            "style.css"
            "index.php"
            "header.php"
            "footer.php"
            "functions.php"
          )
          
          for file in "${theme_files[@]}"; do
            if [ -f "themes/my-theme/$file" ]; then
              echo "‚úÖ themes/my-theme/$file exists"
            else
              echo "‚ùå themes/my-theme/$file missing"
              exit 1
            fi
          done
        else
          echo "‚ùå Theme directory missing"
          exit 1
        fi
        
        echo "‚úÖ Theme structure is valid"
        
    - name: Test Scripts
      run: |
        echo "üß™ Testing scripts..."
        
        # Test if scripts are executable
        scripts=(
          "tests/test-suite.sh"
          "tests/performance-test.sh"
          "setup-new-project.sh"
        )
        
        for script in "${scripts[@]}"; do
          if [ -f "$script" ]; then
            if [ -x "$script" ]; then
              echo "‚úÖ $script is executable"
            else
              echo "‚ùå $script is not executable"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è $script not found (optional)"
          fi
        done
        
        echo "‚úÖ Scripts are valid"
        
    - name: Test Environment Configuration
      run: |
        echo "üß™ Testing environment configuration..."
        
        # Test if env.example has required variables
        required_vars=(
          "DB_NAME"
          "DB_USER"
          "DB_PASS"
          "WORDPRESS_TITLE"
          "WORDPRESS_ADMIN_USER"
          "WORDPRESS_ADMIN_PASSWORD"
          "WORDPRESS_ADMIN_EMAIL"
          "WP_URL"
        )
        
        for var in "${required_vars[@]}"; do
          if grep -q "^${var}=" env.example; then
            echo "‚úÖ $var is defined in env.example"
          else
            echo "‚ùå $var missing in env.example"
            exit 1
          fi
        done
        
        echo "‚úÖ Environment configuration is valid"
        
    - name: Test Security
      run: |
        echo "üß™ Testing security configuration..."
        
        # Check if .env is in .gitignore
        if grep -q "\.env" .gitignore; then
          echo "‚úÖ .env is properly ignored"
        else
          echo "‚ùå .env should be in .gitignore"
          exit 1
        fi
        
        # Check for sensitive files
        sensitive_files=(
          ".env"
          "wp-config.php"
          "*.sql"
        )
        
        for pattern in "${sensitive_files[@]}"; do
          if git ls-files | grep -q "$pattern"; then
            echo "‚ùå $pattern should not be committed"
            exit 1
          else
            echo "‚úÖ $pattern is not committed"
          fi
        done
        
        echo "‚úÖ Security configuration is valid"
        
    - name: Test Documentation
      run: |
        echo "üß™ Testing documentation..."
        
        # Check if README exists and has content
        if [ -f "README.md" ] && [ -s "README.md" ]; then
          echo "‚úÖ README.md exists and has content"
        else
          echo "‚ùå README.md missing or empty"
          exit 1
        fi
        
        # Check if tests README exists
        if [ -f "tests/README.md" ]; then
          echo "‚úÖ tests/README.md exists"
        else
          echo "‚ö†Ô∏è tests/README.md missing (optional)"
        fi
        
        echo "‚úÖ Documentation is valid"
        
    - name: Test Results
      run: |
        echo ""
        echo "üéâ All CI tests passed!"
        echo "‚úÖ Docker configuration: Valid"
        echo "‚úÖ Theme structure: Valid"
        echo "‚úÖ Scripts: Valid"
        echo "‚úÖ Environment: Valid"
        echo "‚úÖ Security: Valid"
        echo "‚úÖ Documentation: Valid"
        echo ""
        echo "üöÄ Ready for deployment!"
